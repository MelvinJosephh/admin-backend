{
  "version": 3,
  "sources": ["../../../../../node_modules/@firebase/storage-compat/dist/esm/index.esm2017.js", "../../../../../node_modules/@angular/fire/fesm2022/angular-fire-compat-storage.mjs"],
  "sourcesContent": ["import firebase from '@firebase/app-compat';\nimport { _getChild, uploadBytesResumable, _dataFromString, _UploadTask, _FbsBlob, StringFormat, listAll, list, getMetadata, updateMetadata, getDownloadURL, deleteObject, _invalidRootOperation, _invalidArgument, ref, _Location, connectStorageEmulator, _TaskState, _TaskEvent } from '@firebase/storage';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass UploadTaskSnapshotCompat {\n  constructor(_delegate, task, ref) {\n    this._delegate = _delegate;\n    this.task = task;\n    this.ref = ref;\n  }\n  get bytesTransferred() {\n    return this._delegate.bytesTransferred;\n  }\n  get metadata() {\n    return this._delegate.metadata;\n  }\n  get state() {\n    return this._delegate.state;\n  }\n  get totalBytes() {\n    return this._delegate.totalBytes;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass UploadTaskCompat {\n  constructor(_delegate, _ref) {\n    this._delegate = _delegate;\n    this._ref = _ref;\n    this.cancel = this._delegate.cancel.bind(this._delegate);\n    this.catch = this._delegate.catch.bind(this._delegate);\n    this.pause = this._delegate.pause.bind(this._delegate);\n    this.resume = this._delegate.resume.bind(this._delegate);\n  }\n  get snapshot() {\n    return new UploadTaskSnapshotCompat(this._delegate.snapshot, this, this._ref);\n  }\n  then(onFulfilled, onRejected) {\n    return this._delegate.then(snapshot => {\n      if (onFulfilled) {\n        return onFulfilled(new UploadTaskSnapshotCompat(snapshot, this, this._ref));\n      }\n    }, onRejected);\n  }\n  on(type, nextOrObserver, error, completed) {\n    let wrappedNextOrObserver = undefined;\n    if (!!nextOrObserver) {\n      if (typeof nextOrObserver === 'function') {\n        wrappedNextOrObserver = taskSnapshot => nextOrObserver(new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref));\n      } else {\n        wrappedNextOrObserver = {\n          next: !!nextOrObserver.next ? taskSnapshot => nextOrObserver.next(new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)) : undefined,\n          complete: nextOrObserver.complete || undefined,\n          error: nextOrObserver.error || undefined\n        };\n      }\n    }\n    return this._delegate.on(type, wrappedNextOrObserver, error || undefined, completed || undefined);\n  }\n}\nclass ListResultCompat {\n  constructor(_delegate, _service) {\n    this._delegate = _delegate;\n    this._service = _service;\n  }\n  get prefixes() {\n    return this._delegate.prefixes.map(ref => new ReferenceCompat(ref, this._service));\n  }\n  get items() {\n    return this._delegate.items.map(ref => new ReferenceCompat(ref, this._service));\n  }\n  get nextPageToken() {\n    return this._delegate.nextPageToken || null;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *  http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass ReferenceCompat {\n  constructor(_delegate, storage) {\n    this._delegate = _delegate;\n    this.storage = storage;\n  }\n  get name() {\n    return this._delegate.name;\n  }\n  get bucket() {\n    return this._delegate.bucket;\n  }\n  get fullPath() {\n    return this._delegate.fullPath;\n  }\n  toString() {\n    return this._delegate.toString();\n  }\n  /**\r\n   * @returns A reference to the object obtained by\r\n   * appending childPath, removing any duplicate, beginning, or trailing\r\n   * slashes.\r\n   */\n  child(childPath) {\n    const reference = _getChild(this._delegate, childPath);\n    return new ReferenceCompat(reference, this.storage);\n  }\n  get root() {\n    return new ReferenceCompat(this._delegate.root, this.storage);\n  }\n  /**\r\n   * @returns A reference to the parent of the\r\n   * current object, or null if the current object is the root.\r\n   */\n  get parent() {\n    const reference = this._delegate.parent;\n    if (reference == null) {\n      return null;\n    }\n    return new ReferenceCompat(reference, this.storage);\n  }\n  /**\r\n   * Uploads a blob to this object's location.\r\n   * @param data - The blob to upload.\r\n   * @returns An UploadTask that lets you control and\r\n   * observe the upload.\r\n   */\n  put(data, metadata) {\n    this._throwIfRoot('put');\n    return new UploadTaskCompat(uploadBytesResumable(this._delegate, data, metadata), this);\n  }\n  /**\r\n   * Uploads a string to this object's location.\r\n   * @param value - The string to upload.\r\n   * @param format - The format of the string to upload.\r\n   * @returns An UploadTask that lets you control and\r\n   * observe the upload.\r\n   */\n  putString(value, format = StringFormat.RAW, metadata) {\n    this._throwIfRoot('putString');\n    const data = _dataFromString(format, value);\n    const metadataClone = Object.assign({}, metadata);\n    if (metadataClone['contentType'] == null && data.contentType != null) {\n      metadataClone['contentType'] = data.contentType;\n    }\n    return new UploadTaskCompat(new _UploadTask(this._delegate, new _FbsBlob(data.data, true), metadataClone), this);\n  }\n  /**\r\n   * List all items (files) and prefixes (folders) under this storage reference.\r\n   *\r\n   * This is a helper method for calling list() repeatedly until there are\r\n   * no more results. The default pagination size is 1000.\r\n   *\r\n   * Note: The results may not be consistent if objects are changed while this\r\n   * operation is running.\r\n   *\r\n   * Warning: listAll may potentially consume too many resources if there are\r\n   * too many results.\r\n   *\r\n   * @returns A Promise that resolves with all the items and prefixes under\r\n   *  the current storage reference. `prefixes` contains references to\r\n   *  sub-directories and `items` contains references to objects in this\r\n   *  folder. `nextPageToken` is never returned.\r\n   */\n  listAll() {\n    return listAll(this._delegate).then(r => new ListResultCompat(r, this.storage));\n  }\n  /**\r\n   * List items (files) and prefixes (folders) under this storage reference.\r\n   *\r\n   * List API is only available for Firebase Rules Version 2.\r\n   *\r\n   * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n   * delimited folder structure. Refer to GCS's List API if you want to learn more.\r\n   *\r\n   * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n   * support objects whose paths end with \"/\" or contain two consecutive\r\n   * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n   * list() may fail if there are too many unsupported objects in the bucket.\r\n   *\r\n   * @param options - See ListOptions for details.\r\n   * @returns A Promise that resolves with the items and prefixes.\r\n   * `prefixes` contains references to sub-folders and `items`\r\n   * contains references to objects in this folder. `nextPageToken`\r\n   * can be used to get the rest of the results.\r\n   */\n  list(options) {\n    return list(this._delegate, options || undefined).then(r => new ListResultCompat(r, this.storage));\n  }\n  /**\r\n   * A `Promise` that resolves with the metadata for this object. If this\r\n   * object doesn't exist or metadata cannot be retrieved, the promise is\r\n   * rejected.\r\n   */\n  getMetadata() {\n    return getMetadata(this._delegate);\n  }\n  /**\r\n   * Updates the metadata for this object.\r\n   * @param metadata - The new metadata for the object.\r\n   * Only values that have been explicitly set will be changed. Explicitly\r\n   * setting a value to null will remove the metadata.\r\n   * @returns A `Promise` that resolves\r\n   * with the new metadata for this object.\r\n   * @see firebaseStorage.Reference.prototype.getMetadata\r\n   */\n  updateMetadata(metadata) {\n    return updateMetadata(this._delegate, metadata);\n  }\n  /**\r\n   * @returns A `Promise` that resolves with the download\r\n   * URL for this object.\r\n   */\n  getDownloadURL() {\n    return getDownloadURL(this._delegate);\n  }\n  /**\r\n   * Deletes the object at this location.\r\n   * @returns A `Promise` that resolves if the deletion succeeds.\r\n   */\n  delete() {\n    this._throwIfRoot('delete');\n    return deleteObject(this._delegate);\n  }\n  _throwIfRoot(name) {\n    if (this._delegate._location.path === '') {\n      throw _invalidRootOperation(name);\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A service that provides firebaseStorage.Reference instances.\r\n * @param opt_url gs:// url to a custom Storage Bucket\r\n */\nclass StorageServiceCompat {\n  constructor(app, _delegate) {\n    this.app = app;\n    this._delegate = _delegate;\n  }\n  get maxOperationRetryTime() {\n    return this._delegate.maxOperationRetryTime;\n  }\n  get maxUploadRetryTime() {\n    return this._delegate.maxUploadRetryTime;\n  }\n  /**\r\n   * Returns a firebaseStorage.Reference for the given path in the default\r\n   * bucket.\r\n   */\n  ref(path) {\n    if (isUrl(path)) {\n      throw _invalidArgument('ref() expected a child path but got a URL, use refFromURL instead.');\n    }\n    return new ReferenceCompat(ref(this._delegate, path), this);\n  }\n  /**\r\n   * Returns a firebaseStorage.Reference object for the given absolute URL,\r\n   * which must be a gs:// or http[s]:// URL.\r\n   */\n  refFromURL(url) {\n    if (!isUrl(url)) {\n      throw _invalidArgument('refFromURL() expected a full URL but got a child path, use ref() instead.');\n    }\n    try {\n      _Location.makeFromUrl(url, this._delegate.host);\n    } catch (e) {\n      throw _invalidArgument('refFromUrl() expected a valid full URL but got an invalid one.');\n    }\n    return new ReferenceCompat(ref(this._delegate, url), this);\n  }\n  setMaxUploadRetryTime(time) {\n    this._delegate.maxUploadRetryTime = time;\n  }\n  setMaxOperationRetryTime(time) {\n    this._delegate.maxOperationRetryTime = time;\n  }\n  useEmulator(host, port, options = {}) {\n    connectStorageEmulator(this._delegate, host, port, options);\n  }\n}\nfunction isUrl(path) {\n  return /^[A-Za-z]+:\\/\\//.test(path);\n}\nconst name = \"@firebase/storage-compat\";\nconst version = \"0.3.10\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Type constant for Firebase Storage.\r\n */\nconst STORAGE_TYPE = 'storage-compat';\nfunction factory(container, {\n  instanceIdentifier: url\n}) {\n  // Dependencies\n  const app = container.getProvider('app-compat').getImmediate();\n  const storageExp = container.getProvider('storage').getImmediate({\n    identifier: url\n  });\n  const storageServiceCompat = new StorageServiceCompat(app, storageExp);\n  return storageServiceCompat;\n}\nfunction registerStorage(instance) {\n  const namespaceExports = {\n    // no-inline\n    TaskState: _TaskState,\n    TaskEvent: _TaskEvent,\n    StringFormat,\n    Storage: StorageServiceCompat,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\" /* ComponentType.PUBLIC */).setServiceProps(namespaceExports).setMultipleInstances(true));\n  instance.registerVersion(name, version);\n}\nregisterStorage(firebase);\nexport { registerStorage };\n", "import * as i1 from '@angular/fire';\nimport { observeOutsideAngular, keepUnstableUntilFirst, VERSION } from '@angular/fire';\nimport { Observable, of, from } from 'rxjs';\nimport { debounceTime, map, switchMap, tap } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, PLATFORM_ID, Injectable, Inject, Optional, makeStateKey, Pipe, NgModule } from '@angular/core';\nimport * as i2 from '@angular/fire/app-check';\nimport { ɵfirebaseAppFactory as _firebaseAppFactory, ɵcacheInstance as _cacheInstance, FIREBASE_OPTIONS, FIREBASE_APP_NAME } from '@angular/fire/compat';\nimport 'firebase/compat/storage';\nimport firebase from 'firebase/compat/app';\nimport { AsyncPipe } from '@angular/common';\n\n// need to import, else the types become import('firebase/compat/app').default.storage.UploadTask\n// and it no longer works w/Firebase v7\n// Things aren't working great, I'm having to put in a lot of work-arounds for what\n// appear to be Firebase JS SDK bugs https://github.com/firebase/firebase-js-sdk/issues/4158\nfunction fromTask(task) {\n  return new Observable(subscriber => {\n    const progress = snap => subscriber.next(snap);\n    const error = e => subscriber.error(e);\n    const complete = () => subscriber.complete();\n    // emit the current snapshot, so they don't have to wait for state_changes\n    // to fire next... this is stale if the task is no longer running :(\n    progress(task.snapshot);\n    const unsub = task.on('state_changed', progress);\n    // it turns out that neither task snapshot nor 'state_changed' fire the last\n    // snapshot before completion, the one with status 'success\" and 100% progress\n    // so let's use the promise form of the task for that\n    task.then(snapshot => {\n      progress(snapshot);\n      complete();\n    }, e => {\n      // TODO investigate, again this is stale, we never fire a canceled or error it seems\n      progress(task.snapshot);\n      error(e);\n    });\n    // on's type if Function, rather than () => void, need to wrap\n    return function unsubscribe() {\n      unsub();\n    };\n  }).pipe(\n  // deal with sync emissions from first emitting `task.snapshot`, this makes sure\n  // that if the task is already finished we don't emit the old running state\n  debounceTime(0));\n}\n\n/**\n * Create an AngularFireUploadTask from a regular UploadTask from the Storage SDK.\n * This method creates an observable of the upload and returns on object that provides\n * multiple methods for controlling and monitoring the file upload.\n */\nfunction createUploadTask(task) {\n  const inner$ = fromTask(task);\n  return {\n    task,\n    then: task.then.bind(task),\n    catch: task.catch.bind(task),\n    pause: task.pause.bind(task),\n    cancel: task.cancel.bind(task),\n    resume: task.resume.bind(task),\n    snapshotChanges: () => inner$,\n    percentageChanges: () => inner$.pipe(map(s => s.bytesTransferred / s.totalBytes * 100))\n  };\n}\n\n/**\n * Create an AngularFire wrapped Storage Reference. This object\n * creates observable methods from promise based methods.\n */\nfunction createStorageRef(ref) {\n  return {\n    getDownloadURL: () => of(undefined).pipe(observeOutsideAngular, switchMap(() => ref.getDownloadURL()), keepUnstableUntilFirst),\n    getMetadata: () => of(undefined).pipe(observeOutsideAngular, switchMap(() => ref.getMetadata()), keepUnstableUntilFirst),\n    delete: () => from(ref.delete()),\n    child: path => createStorageRef(ref.child(path)),\n    updateMetadata: meta => from(ref.updateMetadata(meta)),\n    put: (data, metadata) => {\n      const task = ref.put(data, metadata);\n      return createUploadTask(task);\n    },\n    putString: (data, format, metadata) => {\n      const task = ref.putString(data, format, metadata);\n      return createUploadTask(task);\n    },\n    list: options => from(ref.list(options)),\n    listAll: () => from(ref.listAll())\n  };\n}\nconst BUCKET = new InjectionToken('angularfire2.storageBucket');\nconst MAX_UPLOAD_RETRY_TIME = new InjectionToken('angularfire2.storage.maxUploadRetryTime');\nconst MAX_OPERATION_RETRY_TIME = new InjectionToken('angularfire2.storage.maxOperationRetryTime');\nconst USE_EMULATOR = new InjectionToken('angularfire2.storage.use-emulator');\n/**\n * AngularFireStorage Service\n *\n * This service is the main entry point for this feature module. It provides\n * an API for uploading and downloading binary files from Cloud Storage for\n * Firebase.\n */\nclass AngularFireStorage {\n  storage;\n  constructor(options, name, storageBucket,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  platformId, zone, schedulers, maxUploadRetryTime, maxOperationRetryTime, _useEmulator, _appCheckInstances) {\n    const app = _firebaseAppFactory(options, zone, name);\n    this.storage = _cacheInstance(`${app.name}.storage.${storageBucket}`, 'AngularFireStorage', app.name, () => {\n      const storage = zone.runOutsideAngular(() => app.storage(storageBucket || undefined));\n      const useEmulator = _useEmulator;\n      if (useEmulator) {\n        storage.useEmulator(...useEmulator);\n      }\n      if (maxUploadRetryTime) {\n        storage.setMaxUploadRetryTime(maxUploadRetryTime);\n      }\n      if (maxOperationRetryTime) {\n        storage.setMaxOperationRetryTime(maxOperationRetryTime);\n      }\n      return storage;\n    }, [maxUploadRetryTime, maxOperationRetryTime]);\n  }\n  ref(path) {\n    return createStorageRef(this.storage.ref(path));\n  }\n  refFromURL(path) {\n    return createStorageRef(this.storage.refFromURL(path));\n  }\n  upload(path, data, metadata) {\n    const storageRef = this.storage.ref(path);\n    const ref = createStorageRef(storageRef);\n    return ref.put(data, metadata);\n  }\n  static ɵfac = function AngularFireStorage_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || AngularFireStorage)(i0.ɵɵinject(FIREBASE_OPTIONS), i0.ɵɵinject(FIREBASE_APP_NAME, 8), i0.ɵɵinject(BUCKET, 8), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.ɵAngularFireSchedulers), i0.ɵɵinject(MAX_UPLOAD_RETRY_TIME, 8), i0.ɵɵinject(MAX_OPERATION_RETRY_TIME, 8), i0.ɵɵinject(USE_EMULATOR, 8), i0.ɵɵinject(i2.AppCheckInstances, 8));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: AngularFireStorage,\n    factory: AngularFireStorage.ɵfac,\n    providedIn: 'any'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AngularFireStorage, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'any'\n    }]\n  }], () => [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [FIREBASE_OPTIONS]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [FIREBASE_APP_NAME]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [BUCKET]\n    }]\n  }, {\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: i0.NgZone\n  }, {\n    type: i1.ɵAngularFireSchedulers\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAX_UPLOAD_RETRY_TIME]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAX_OPERATION_RETRY_TIME]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [USE_EMULATOR]\n    }]\n  }, {\n    type: i2.AppCheckInstances,\n    decorators: [{\n      type: Optional\n    }]\n  }], null);\n})();\n\n/** to be used with in combination with | async */\nclass GetDownloadURLPipe {\n  storage;\n  state;\n  asyncPipe;\n  path;\n  downloadUrl$;\n  constructor(storage, cdr, state) {\n    this.storage = storage;\n    this.state = state;\n    this.asyncPipe = new AsyncPipe(cdr);\n  }\n  transform(path) {\n    if (path !== this.path) {\n      this.path = path;\n      const key = makeStateKey(`|getDownloadURL|${path}`);\n      const existing = this.state?.get(key, undefined);\n      this.downloadUrl$ = existing ? of(existing) : this.storage.ref(path).getDownloadURL().pipe(tap(it => this.state?.set(key, it)));\n    }\n    return this.asyncPipe.transform(this.downloadUrl$);\n  }\n  ngOnDestroy() {\n    this.asyncPipe.ngOnDestroy();\n  }\n  static ɵfac = function GetDownloadURLPipe_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || GetDownloadURLPipe)(i0.ɵɵdirectiveInject(AngularFireStorage, 16), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef, 16), i0.ɵɵdirectiveInject(i0.TransferState, 24));\n  };\n  static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"getDownloadURL\",\n    type: GetDownloadURLPipe,\n    pure: false\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GetDownloadURLPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'getDownloadURL',\n      pure: false\n    }]\n  }], () => [{\n    type: AngularFireStorage\n  }, {\n    type: i0.ChangeDetectorRef\n  }, {\n    type: i0.TransferState,\n    decorators: [{\n      type: Optional\n    }]\n  }], null);\n})();\nclass GetDownloadURLPipeModule {\n  static ɵfac = function GetDownloadURLPipeModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || GetDownloadURLPipeModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: GetDownloadURLPipeModule,\n    declarations: [GetDownloadURLPipe],\n    exports: [GetDownloadURLPipe]\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GetDownloadURLPipeModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [GetDownloadURLPipe],\n      exports: [GetDownloadURLPipe]\n    }]\n  }], null, null);\n})();\nclass AngularFireStorageModule {\n  constructor() {\n    firebase.registerVersion('angularfire', VERSION.full, 'gcs-compat');\n  }\n  static ɵfac = function AngularFireStorageModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || AngularFireStorageModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: AngularFireStorageModule,\n    exports: [GetDownloadURLPipeModule]\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [AngularFireStorage],\n    imports: [GetDownloadURLPipeModule]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AngularFireStorageModule, [{\n    type: NgModule,\n    args: [{\n      exports: [GetDownloadURLPipeModule],\n      providers: [AngularFireStorage]\n    }]\n  }], () => [], null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AngularFireStorage, AngularFireStorageModule, BUCKET, GetDownloadURLPipe, GetDownloadURLPipeModule, MAX_OPERATION_RETRY_TIME, MAX_UPLOAD_RETRY_TIME, USE_EMULATOR, createStorageRef, createUploadTask, fromTask };\n"],
  "mappings": "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",
  "names": ["ref", "name", "ref", "name"]
}
